var loopback = require('loopback');
var boot = require('loopback-boot');
var path = require('path')
var logger = require('tracer').colorConsole()

var app = module.exports = loopback();






// var ClusterStore = require('strong-cluster-connect-store')(loopback.session);
// var app = module.exports = loopback();
// app.use(loopback.cookieParser())
// app.use(loopback.session({ store: new ClusterStore(), secret: 'keyboard cat' }));





var cluster = require('cluster');
var control = require('strong-cluster-control');
// global setup here...
control.start({
  size: control.CPUS,
  shutdownTimeout: 5000,
  terminateTimeout: 5000,
  throttleDelay: 5000
}).on('error', function(er) {
  // donâ€™t need to manually restart the workers
});



if (cluster.isMaster) {
  console.log('****** isMaster')
  cluster.on('exit', (worker, code, signal) => {
    console.log(`worker ${worker.process.pid} died`);
  });
  return;
} else {
  console.log('****** isWorker')

}



require('./server-logger')
require('./server-env')()
process.umask(0)

logger.info('%s is running in `%s`', process.title, process.env.NODE_ENV)
logger.info('%s is set to umask `%s`', process.title, process.umask())

// Static variables
var STATIC = path.resolve(__dirname, '../client/')

app.use(loopback.logger('tiny'));

// Set up the /favicon.ico
app.use(loopback.favicon(path.join(STATIC, 'favicon.ico')))


app.set('env', process.env.NODE_ENV || 'development')
app.set('version', require('../package.json').version)

app.engine('html', require('ejs').renderFile)
app.set('view engine', 'html')
app.set('views', path.resolve(__dirname, '../client'))

app.locals.ENV = app.get('env')
app.locals.VERSION = app.get('version')

app.use(loopback.compress())
app.use(loopback.context())
app.use(loopback.token())


app.use(function (req, res, next) {

  if (!req.accessToken) { return next(); }
  logger.info('setting current-user middleware')

  app.models.User.findById(req.accessToken.userId, function (err, user) {
    if (err) { return next(err); }
    if (!user) { return next(new Error('No user with this access token was found.')); }
    res.locals.currentUser = user
    var loopbackContext = loopback.getCurrentContext()
    if (loopbackContext) { loopbackContext.set('currentUser', user); }
    next()
  })
})


// app.use(require('./settings/current-user')(app))

app.start = function() {
  // start the web server
  return app.listen(function() {
    app.emit('started');
    var baseUrl = app.get('url').replace(/\/$/, '');
    console.log('Web server listening at: %s', baseUrl);
    if (app.get('loopback-component-explorer')) {
      var explorerPath = app.get('loopback-component-explorer').mountPath;
      console.log('Browse your REST API at %s%s', baseUrl, explorerPath);
    }
  });
};



// Bootstrap the application, configure models, datasources and middleware.
// Sub-apps like REST API are mounted via boot scripts.
boot(app, __dirname, function(err) {
  if (err) throw err;

  // start the server if `$ node server.js`
  if (require.main === module)
    app.start();
});


// User ACL setting
app.models.User.settings.acls = require('./user-acls.json')
